//////////////////////////////////////////////////////////////////////////////////
//
//	Модуль Типы данных
//	
//	Автор и разработчик: Мизгирев Ярослав Михайлович
//	https://github.com/YaroslavMizgirev/1C
//	telegram: https://t.me/YaroslavMizgirev
//	
//////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОписаниеТипа

// Создание нового описания типа по переданному значению.
//
// Параметры:
//  МассивТипов	 - Массив Из Тип(Произвольный)	 - Массив типов с произвольными значениями типа.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа с произвольными значениями.
//
Функция ОписаниеТипаПоЗначению(МассивТипов) Экспорт
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#Область ПримитивныеТипы

// Создание нового описания строкового типа.
//
// Параметры:
//  ДлинаСтроки				 - Число	 - Длина строки.
//  ВариантОграничения	 - Строка	 - Допустимые значения: Переменная, Фиксированная.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание строкового типа.
//
Функция ОписаниеТипаСтрока(ДлинаСтроки=0,ВариантОграничения="Переменная") Экспорт
	
	Возврат Новый ОписаниеТипов("Строка",, кСтрока(ДлинаСтроки, ВариантОграничения));
	
КонецФункции

// Создание нового описания числового типа.
//
// Параметры:
//  ДлинаЧисла					 - Число	 - Общее количество разрядов числа (в т.ч. количество разрядов дробной части).
//  ТочностьЧисла			 - Число	 - Число разрядов дробной части.
//  ВариантОграничения	 - Строка	 - Допустимые значения: "Любой", "Неотрицательный".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание числового типа.
//
Функция ОписаниеТипаЧисло(ДлинаЧисла=15,ТочностьЧисла=2,ВариантОграничения="Любой") Экспорт
	
	Возврат Новый ОписаниеТипов("Число", кЧисло(ДлинаЧисла, ТочностьЧисла, ВариантОграничения));
	
КонецФункции

// Создание нового описания типа "Дата".
//
// Параметры:
//  ВариантОграничения - Строка - Допустимые значения: "Время", "Дата", "ДатаВремя".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "Дата".
//
Функция ОписаниеТипаДатаВремя(ВариантОграничения="ДатаВремя") Экспорт
	
	Возврат Новый ОписаниеТипов("Дата",,, кДатаВремя(ВариантОграничения));
	
КонецФункции

// Создание нового описания типа "Булево".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "Булево".
//
Функция ОписаниеТипаБулево() Экспорт
	
	Возврат Новый ОписаниеТипов("Булево");
	
КонецФункции

#КонецОбласти

#Область УниверсальныеКоллекции

// Создание нового описания типа "Дерево значений".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ДеревоЗначений".
//
Функция ОписаниеТипаДеревоЗначений() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ДеревоЗначений"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Ключ и значение".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "КлючИЗначение".
//
Функция ОписаниеТипаКлючИЗначение() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("КлючИЗначение"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Массив".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "Массив".
//
Функция ОписаниеТипаМассив() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("Массив"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Соответствие".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "Соответствие".
//
Функция ОписаниеТипаСоответствие() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("Соответствие"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Список значений".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "СписокЗначений".
//
Функция ОписаниеТипаСписокЗначений() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("СписокЗначений"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Структура".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "Структура".
//
Функция ОписаниеТипаСтруктура() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("Структура"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Таблица значений".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ТаблицаЗначений".
//
Функция ОписаниеТипаТаблицаЗначений() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

// Создание нового описания типа "Динамический список".
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ДинамическийСписок".
//
Функция ОписаниеТипаДинамическийСписок() Экспорт
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ДинамическийСписок"));
	Возврат Новый ОписаниеТипов(МассивТипаВыбора);
	
КонецФункции

#КонецОбласти

#Область Справочники

// Создание нового описания типа "СправочникСсылка".
//
// Параметры:
//  ИмяСправочника - Строка - Имя справочника.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "СправочникСсылка".
//
Функция ОписаниеТипаСправочник(ИмяСправочника) Экспорт
	
	Возврат Новый ОписаниеТипов("СправочникСсылка." + уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИмяСправочника));
	
КонецФункции

// Создание нового описания типов "СправочникСсылка".
//
// Параметры:
//  ИменаСправочников - Строка - Имена справочников перечисленные через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "СправочникСсылка".
//
Функция ОписаниеТиповСправочников(ИменаСправочников) Экспорт
	
	ИменаСправочников = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаСправочников, ",");
	МассивТипов = Новый Массив;
	МассивСправочников = СтрРазделить(ИменаСправочников, ",", Ложь);
	Для Каждого дЭлемент Из МассивСправочников Цикл
		МассивТипов.Добавить(Тип("СправочникСсылка." + дЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область Документы

// Создание нового описания типа "ДокументСсылка".
//
// Параметры:
//  ИмяДокумента - Строка	 - Имя документа.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ДокументСсылка".
//
Функция ОписаниеТипаДокумент(ИмяДокумента) Экспорт
	
	Возврат Новый ОписаниеТипов("ДокументСсылка." + уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИмяДокумента));
	
КонецФункции

// Создание нового описания типов "ДокументСсылка".
//
// Параметры:
//  ИменаДокументов - Строка - Имена документов перечисленные через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "ДокументСсылка".
//
Функция ОписаниеТиповДокументов(ИменаДокументов) Экспорт
	
	ИменаДокументов = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаДокументов, ",");
	МассивТипов = Новый Массив;
	мДокументы = СтрРазделить(ИменаДокументов, ",", Ложь);
	Для Каждого дЭлемент Из мДокументы Цикл
		МассивТипов.Добавить(Тип("ДокументСсылка." + дЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область Перечисления

// Создание нового описания типа "ПеречислениеСсылка".
//
// Параметры:
//  ИмяПеречисления - Строка - Имя перечисления.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ПеречислениеСсылка".
//
Функция ОписаниеТипаПеречисление(ИмяПеречисления) Экспорт
	
	Возврат Новый ОписаниеТипов("ПеречислениеСсылка." + уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИмяПеречисления));
	
КонецФункции

// Создание нового описания типов "ПеречислениеСсылка".
//
// Параметры:
//  ИменаПеречислений - Строка - Имена перечислений через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "ПеречислениеСсылка".
//
Функция ОписаниеТиповПеречислений(ИменаПеречислений) Экспорт
	
	ИменаПеречислений = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаПеречислений, ",");
	МассивТипов = Новый Массив;
	мПеречислений = СтрРазделить(ИменаПеречислений, ",", Ложь);
	Для Каждого пЭлемент Из мПеречислений Цикл
		МассивТипов.Добавить(Тип("ПеречислениеСсылка." + пЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область ПланыСчетов

// Создание нового описания типа "ПланСчетовСсылка".
//
// Параметры:
//  ИмяПланаВидовРасчета - Строка - Имя плана счетов.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ПланСчетовСсылка".
//
Функция ОписаниеТипаПланСчетов(ИмяПланаСчетов) Экспорт
	
	Возврат Новый ОписаниеТипов("ПланСчетовСсылка." + уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИмяПланаСчетов));
	
КонецФункции

#КонецОбласти

#Область ПланыВидовХарактеристик

// Создание нового описания типа "ПланВидовХарактеристикСсылка".
//
// Параметры:
//  ИмяПланаВидовХарактеристик - Строка - Имя плана видов характеристик.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ПланВидовХарактеристикСсылка".
//
Функция ОписаниеТипаПланВидовХарактеристик(ИмяПланаВидовХарактеристик) Экспорт
	
	Возврат Новый ОписаниеТипов("ПланВидовХарактеристикСсылка." + уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИмяПланаВидовХарактеристик));
	
КонецФункции

// Создание нового описания типов "ПланВидовХарактеристикСсылка".
//
// Параметры:
//  ИменаПлановВидовХарактеристик - Строка - Имена планов видов характеристик через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "ПланВидовХарактеристикСсылка".
//
Функция ОписаниеТиповПлановВидовХарактеристик(ИменаПлановВидовХарактеристик) Экспорт
	
	ИменаПлановВидовХарактеристик = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаПлановВидовХарактеристик, ",");
	МассивТипов = Новый Массив;
	мПВХ = СтрРазделить(ИменаПлановВидовХарактеристик, ",", Ложь);
	Для Каждого пвхЭлемент Из мПВХ Цикл
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка." + пвхЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

// Создание нового описания типов значений характеристик заданного Плана видов характеристик.
//
// Параметры:
//  ИмяПланаВидовХарактеристик - Строка - Имя плана видов характеристик.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов значений характеристик.
//
Функция ОписаниеТиповХарактеристик(ИмяПланаВидовХарактеристик) Экспорт
	
	#Если ТонкийКлиент Или МобильныйКлиент Или ВебКлиент Или ТолстыйКлиентУправляемоеПриложение Тогда
		Возврат ОписаниеТипаПоЗначению(м_ТипДанныхВызовСервера.МассивТиповХарактеристик(ИмяПланаВидовХарактеристик));
	#ИначеЕсли Сервер Или ВнешнееСоединение Или ТолстыйКлиентОбычноеПриложение Тогда
		Возврат ОписаниеТипаПоЗначению(м_ТипДанных.МассивТиповХарактеристик(ИмяПланаВидовХарактеристик));
	#Иначе
		ТекстСообщения = НСтр("ru='Не поддерживается на этом типе приложения';");
		ВызватьИсключение ТекстСообщения;
	#КонецЕсли
	
КонецФункции

#КонецОбласти

#Область ПланыВидовРасчета

// Создание нового описания типа "ПланВидовРасчетаСсылка".
//
// Параметры:
//  ИмяПланаВидовРасчета - Строка - Имя плана видов расчета.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ПланВидовРасчетаСсылка".
//
Функция ОписаниеТипаПланВидовРасчета(ИмяПланаВидовРасчета) Экспорт
	
	Возврат Новый ОписаниеТипов("ПланВидовРасчетаСсылка." + уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИмяПланаВидовРасчета));
	
КонецФункции

// Создание нового описания типов "ПланВидовРасчетаСсылка".
//
// Параметры:
//  ИменаПлановВидовРасчета - Строка - Имена планов видов расчета через запятую(",")..
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "ПланВидовРасчетаСсылка".
//
Функция ОписаниеТиповПлановВидовРасчета(ИменаПлановВидовРасчета) Экспорт
	
	ИменаПлановВидовРасчета = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаПлановВидовРасчета, ",");
	МассивТипов = Новый Массив;
	мПВР = СтрРазделить(ИменаПлановВидовРасчета, ",", Ложь);
	Для Каждого пврЭлемент Из мПВР Цикл
		МассивТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + пврЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область БизнесПроцессы

// Создание нового описания типа "БизнесПроцессСсылка".
//
// Параметры:
//  ИмяБизнесПроцесса - Строка - Имя бизнес-процесса.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "БизнесПроцессСсылка".
//
Функция ОписаниеТипаБизнесПроцесс(ИмяБизнесПроцесса) Экспорт
	
	Возврат Новый ОписаниеТипов("БизнесПроцессСсылка." + уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИмяБизнесПроцесса));
	
КонецФункции

// Создание нового описания типов "БизнесПроцессСсылка".
//
// Параметры:
//  ИменаБизнесПроцессов - Строка - Имена бизнес-процессов через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "БизнесПроцессСсылка".
//
Функция ОписаниеТиповБизнесПроцессов(ИменаБизнесПроцессов) Экспорт
	
	ИменаБизнесПроцессов = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаБизнесПроцессов, ",");
	МассивТипов = Новый Массив;
	мБизнесПроцессы = СтрРазделить(ИменаБизнесПроцессов, ",", Ложь);
	Для Каждого бпЭлемент Из мБизнесПроцессы Цикл
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка." + бпЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область Задачи

// Создание нового описания типа "ЗадачаСсылка".
//
// Параметры:
//  ИмяЗадачи - Строка - Имя задачи.
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типа "ЗадачаСсылка".
//
Функция ОписаниеТипаЗадача(ИмяЗадачи) Экспорт
	
	Возврат Новый ОписаниеТипов("ЗадачаСсылка." + уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИмяЗадачи));
	
КонецФункции

// Создание нового описания типов "ЗадачаСсылка".
//
// Параметры:
//  ИменаЗадач - Строка - Имена задач через запятую(",").
// 
// Возвращаемое значение:
//   - ОписаниеТипов - Описание типов "ЗадачаСсылка".
//
Функция ОписаниеТиповЗадач(ИменаЗадач) Экспорт
	
	ИменаЗадач = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаЗадач, ",");
	МассивТипов = Новый Массив;
	мЗадачи = СтрРазделить(ИменаЗадач, ",", Ложь);
	Для Каждого зЭлемент Из мЗадачи Цикл
		МассивТипов.Добавить(Тип("ЗадачаСсылка." + зЭлемент));
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КвалификаторыТипов

// Создание квалификатора строки.
//
// Параметры:
//  ДлинаСтроки				 - Число - Содержит длину строки в символах. Строка неограниченной длины имеет длину строки, равную 0.
//  ВариантОграничения - Строка - Допустимые значения: "Переменная", "Фиксированная".
// 
// Возвращаемое значение:
//   - КвалификаторыСтроки - Описание допустимых значений строкового типа.
//
Функция кСтрока(ДлинаСтроки=0,ВариантОграничения="Переменная") Экспорт
	
	Возврат Новый КвалификаторыСтроки(ДлинаСтроки,ДопустимаяДлина[ВариантОграничения]);
	
КонецФункции

// Создание квалификатора числа.
//
// Параметры:
//  ДлинаЧисла				 - Число - Общее количество разрядов числа (в т.ч. количество разрядов дробной части).
//  ТочностьЧисла			 - Число - Число разрядов дробной части.
//  ВариантОграничения - Строка - Допустимые значения: "Любой", "Неотрицательный".
// 
// Возвращаемое значение:
//   - КвалификаторыЧисла - Описание допустимых значений числового типа.
//
Функция кЧисло(ДлинаЧисла=15,ТочностьЧисла=2,ВариантОграничения="Любой") Экспорт
	
	Возврат Новый КвалификаторыЧисла(ДлинаЧисла, ТочностьЧисла, ДопустимыйЗнак[ВариантОграничения]);
	
КонецФункции

// Создание квалификатора даты.
//
// Параметры:
//  ВариантОграничения - Строка - Допустимые значения: "Время", "Дата", "ДатаВремя".
// 
// Возвращаемое значение:
//   - КвалификаторыДаты - Описание допустимых значений типа Дата.
//
Функция кДатаВремя(ВариантОграничения="ДатаВремя") Экспорт
	
	Возврат Новый КвалификаторыДаты(ЧастиДаты[ВариантОграничения]);
	
КонецФункции

// Создание квалификатора двоичных данных.
//
// Параметры:
//  Длина								 - Число - Содержит максимальную длину двоичных данных. 0 - длина неограниченна.
//  ВариантОграничения	 - Строка - Допустимые значения: "Переменная", "Фиксированная".
// 
// Возвращаемое значение:
//   - КвалификаторыДвоичныхДанных - Описание допустимых значений двоичных данных.
//
Функция кДвоичныеДанные(Длина,ВариантОграничения="Переменная") Экспорт
	
	Возврат Новый КвалификаторыДвоичныхДанных(Длина, ДопустимаяДлина[ВариантОграничения]);
	
КонецФункции

#КонецОбласти

#Область Массив

#Область МассивТипов

// Создание нового массива типов по переданному значению.
//
// Параметры:
//  ЗначениеТипа - Тип - Значение типа.
// 
// Возвращаемое значение:
//   - Массив Из Тип(ЗначениеТипа).
//
Функция МассивТиповПоЗначению(ЗначениеТипа) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ЗначениеТипа);
	Возврат МассивТипов;
	
КонецФункции

#Область ПримитивныеТипы

// Создание нового массива типов "Строка".
//
// Возвращаемое значение:
//   - Массив Из Тип("Строка").
//
Функция МассивТиповСтрока() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "Число".
//
// Возвращаемое значение:
//   - Массив Из Тип("Число").
//
Функция МассивТиповЧисло() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "Дата".
//
// Возвращаемое значение:
//   - Массив Из Тип("Дата").
//
Функция МассивТиповДата() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "Булево".
// 
// Возвращаемое значение:
//   - Массив Из Тип("Булево").
//
Функция МассивТиповБулево() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива примитивных типов данных: "Строка", "Число", "Дата", "Булево".
//
// Возвращаемое значение:
//   - Массив Из Тип("Строка"), Тип("Число"), Тип("Дата"), Тип("Булево").
//
Функция МассивПримитивныхТипов() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("Дата"));
	МассивТипов.Добавить(Тип("Булево"));
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#Область Справочники

// Создание нового массива типов "СправочникСсылка".
//
// Параметры:
//  ИменаСправочников - Строка - Имена справочников через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(СправочникСсылка).
//
Функция МассивТиповСправочники(ИменаСправочников) Экспорт
	
	ИменаСправочников = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаСправочников, ",");
	МассивТипов = Новый Массив;
	мСправочники = СтрРазделить(ИменаСправочников, ",", Ложь);
	Для Каждого сЭлемент Из мСправочники Цикл
		МассивТипов.Добавить(Тип("СправочникСсылка." + сЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#Область Документы

// Создание нового массива типов "ДокументСсылка".
//
// Параметры:
//  ИменаДокументов - Строка - Имена документов через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(ДокументСсылка)
//
Функция МассивТиповДокументы(ИменаДокументов) Экспорт
	
	ИменаДокументов = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаДокументов, ",");
	МассивТипов = Новый Массив;
	мДокументы = СтрРазделить(ИменаДокументов, ",", Ложь);
	Для Каждого дЭлемент Из мДокументы Цикл
		МассивТипов.Добавить(Тип("ДокументСсылка." + дЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#Область Перечисления

// Создание нового массива типов "ПеречислениеСсылка".
//
// Параметры:
//  ИменаПеречислений - Строка - Имена перечислений через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(ПеречислениеСсылка)
//
Функция МассивТиповПеречисления(ИменаПеречислений) Экспорт
	
	ИменаПеречислений = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаПеречислений, ",");
	МассивТипов = Новый Массив;
	мПеречисления = СтрРазделить(ИменаПеречислений, ",", Ложь);
	Для Каждого пЭлемент Из мПеречисления Цикл
		МассивТипов.Добавить(Тип("ПеречислениеСсылка." + пЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#Область ПланыВидовХарактеристик

// Создание нового массива типов "ПланВидовХарактеристикСсылка".
//
// Параметры:
//  ИменаПлановВидовХарактеристик - Строка - Имена планов видов характеристик через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(ПланВидовХарактеристикСсылка)
//
Функция МассивТиповПлановВидовХарактеристик(ИменаПлановВидовХарактеристик) Экспорт
	
	ИменаПлановВидовХарактеристик = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаПлановВидовХарактеристик, ",");
	МассивТипов = Новый Массив;
	мПВХ = СтрРазделить(ИменаПлановВидовХарактеристик, ",", Ложь);
	Для Каждого пвхЭлемент Из мПВХ Цикл
		МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка." + пвхЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#Область ПланыВидовРасчета

// Создание нового массива типов "ПланВидовРасчетаСсылка".
//
// Параметры:
//  ИменаПлановВидовРасчета - Строка - Имена планов видов расчета через запятую(",")..
// 
// Возвращаемое значение:
//   - Массив Из Тип(ПланВидовРасчетаСсылка)
//
Функция МассивТиповПлановВидовРасчета(ИменаПлановВидовРасчета) Экспорт
	
	ИменаПлановВидовРасчета = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаПлановВидовРасчета, ",");
	МассивТипов = Новый Массив;
	мПВР = СтрРазделить(ИменаПлановВидовРасчета, ",", Ложь);
	Для Каждого пврЭлемент Из мПВР Цикл
		МассивТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + пврЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#Область БизнесПроцессы

// Создание нового массива типов "БизнесПроцессСсылка".
//
// Параметры:
//  ИменаБизнесПроцессов - Строка - Имена бизнес-процессов через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(БизнесПроцессСсылка).
//
Функция МассивТиповБизнесПроцессов(ИменаБизнесПроцессов) Экспорт
	
	ИменаБизнесПроцессов = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаБизнесПроцессов, ",");
	МассивТипов = Новый Массив;
	мБизнесПроцессы = СтрРазделить(ИменаБизнесПроцессов, ",", Ложь);
	Для Каждого бпЭлемент Из мБизнесПроцессы Цикл
		МассивТипов.Добавить(Тип("БизнесПроцессСсылка." + бпЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#Область Задачи

// Создание нового массива типов "ЗадачаСсылка".
//
// Параметры:
//  ИменаЗадач - Строка - Имена задач через запятую(",").
// 
// Возвращаемое значение:
//   - Массив Из Тип(ЗадачаСсылка).
//
Функция МассивТиповЗадач(ИменаЗадач) Экспорт
	
	ИменаЗадач = уидОбработкаСтрокКлиентСервер.ОчиститьОтЗапрещенныхСимволов(ИменаЗадач, ",");
	МассивТипов = Новый Массив;
	мЗадачи = СтрРазделить(ИменаЗадач, ",", Ложь);
	Для Каждого зЭлемент Из мЗадачи Цикл
		МассивТипов.Добавить(Тип("ЗадачаСсылка." + зЭлемент));
	КонецЦикла;
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#Область ПрочиеТипы

// Создание нового массива типов "Граница".
//
// Возвращаемое значение:
//   - Массив Из Тип("Граница").
//
Функция МассивТиповГраница() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Граница"));
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "МоментВремени".
//
// Возвращаемое значение:
//   - Массив Из Тип("МоментВремени").
//
Функция МассивТиповМоментВремени() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("МоментВремени"));
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "СписокЗначений".
//
// Возвращаемое значение:
//   - Массив Из Тип("СписокЗначений").
//
Функция МассивТиповСписокЗначений() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СписокЗначений"));
	Возврат МассивТипов;
	
КонецФункции

// Создание нового массива типов "ТаблицаЗначений".
//
// Возвращаемое значение:
//   - Массив Из Тип("ТаблицаЗначений").
//
Функция МассивТиповТаблицаЗначений() Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ТаблицаЗначений"));
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Проверяет значение структуры.
// Если значение "Неопределено", тогда значение заменяется на пустую структуру.
//
// Параметры:
//  ТекущаяСтруктура - Структура - Переданная структура или новая пустая структура.
//
Процедура ЕслиМассивНеопределеноТоНовый(ТекущийМассив) Экспорт
	
	Если ТекущийМассив = Неопределено Тогда ТекущийМассив = Новый Массив; КонецЕсли;
	
КонецПроцедуры

// Функция - Это пустой массив.
//
// Параметры:
//  пМассив	 - Массив Из Произвольное.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ЭтоПустойМассив(пМассив) Экспорт
	
	Возврат пМассив.Количество() = 0;
	
КонецФункции

// Функция - Значение в массиве.
//
// Параметры:
//  Значение1	 - Произвольное.
// 
// Возвращаемое значение:
//   - Массив Из Произвольное.
//
Функция ЗначениеВМассиве(Значение1) Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Значение1);
	
	Возврат Результат;
	
КонецФункции

// Процедура - Удалить все вхождения типа из массива.
//
// Параметры:
//  Массив	 - Массив Из Произвольный - массив, из которого необходимо удалить значения.
//  Тип			 - Тип - тип значений, которые подлежат удалению из массива.
//
Процедура УдалитьВсеВхожденияТипаИзМассива(Массив,Тип) Экспорт
	
	КоличествоЭлементовКоллекции = Массив.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		Индекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если ТипЗнч(Массив[Индекс]) = Тип Тогда
			Массив.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Удалить все вхождения типа из массива типов.
//
// Параметры:
//  Массив	 - Массив Из Тип - массив, из которого необходимо удалить значения.
//  Тип			 - Тип - тип значений, которые подлежат удалению из массива.
//
Процедура УдалитьВсеВхожденияТипаИзМассиваТипов(Массив,Тип) Экспорт
	
	КоличествоЭлементовКоллекции = Массив.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		Индекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		Если Массив[Индекс] = Тип Тогда Массив.Удалить(Индекс); КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Дополнить массив.
//  Дополняет массив МассивПриемник значениями из массива МассивИсточник.
//
// Параметры:
//  МассивПриемник						 - Массив Из Произвольный - массив, в который необходимо добавить значения.
//  МассивИсточник						 - Массив Из Произвольный - массив значений для заполнения.
//  ТолькоУникальныеЗначения	 - Булево - если Истина, то в массив будут включены только уникальные значения.
//
Процедура ДополнитьМассив(МассивПриемник,МассивИсточник,ТолькоУникальныеЗначения=Ложь) Экспорт
	
	Если ТолькоУникальныеЗначения Тогда
		УникальныеЗначения = Новый Соответствие;
		Для Каждого Значение Из МассивПриемник Цикл
			УникальныеЗначения.Вставить(Значение, Истина);
		КонецЦикла;
		
		Для Каждого Значение Из МассивИсточник Цикл
			Если УникальныеЗначения[Значение] = Неопределено Тогда
				МассивПриемник.Добавить(Значение);
				УникальныеЗначения.Вставить(Значение, Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Значение Из МассивИсточник Цикл
			МассивПриемник.Добавить(Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаЗначений

// Процедура - Очистить значение строки.
//
// Параметры:
//  СтрокаЗначение - Строка.
//
Процедура ОчиститьЗначениеСтроки(СтрокаЗначение) Экспорт
	
	СтроковоеЗначение = "";
	
КонецПроцедуры

// Процедура - Очистить значение ссылочного типа.
//
// Параметры:
//  ОбъектЗначение - ЛюбаяСсылка.
//
Процедура ОчиститьЗначениеСсылочногоТипа(СсылкаЗначение) Экспорт
	
	СсылкаЗначение = Неопределено;
	
КонецПроцедуры

// Процедура - Очистить значение объекта.
//
// Параметры:
//  ОбъектЗначение - Произвольное.
//
Процедура ОчиститьЗначениеОбъекта(ОбъектЗначение) Экспорт
	
	ОбъектЗначение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Структура

// Проверяет значение структуры.
//  Если значение "Неопределено", тогда значение заменяется на пустую структуру.
//
// Параметры:
//  ПроверяемаяСтруктура - Неопределено, Структура.
//
Процедура ЕслиСтруктураНеопределеноТоНовая(ПроверяемаяСтруктура) Экспорт
	
	Если ПроверяемаяСтруктура = Неопределено Тогда ПроверяемаяСтруктура = Новый Структура; КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СписокЗначений

// Процедура - Если список значений неопределено то новый.
//  Если значение "Неопределено", тогда значение заменяется на пустой список значений.
//
// Параметры:
//  ПроверяемыйСписокЗначений	 - Неопределено, СписокЗначений.
//
Процедура ЕслиСписокЗначенийНеопределеноТоНовый(ПроверяемыйСписокЗначений) Экспорт
	
	Если ПроверяемыйСписокЗначений = Неопределено Тогда ПроверяемыйСписокЗначений = Новый СписокЗначений; КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПримитивныеТипы

// Функция - Это примитивный тип данных.
//
// Параметры:
//  ПроверяемоеЗначение	 - Произвольный.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ЭтоПримитивныйТипДанных(Знач ПроверяемоеЗначение) Экспорт
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("ОписаниеТипов") Тогда
		МассивТипов = ПроверяемоеЗначение.Типы();
		Если МассивТипов.Количество() > 0 Тогда УдалитьВсеВхожденияТипаИзМассиваТипов(МассивТипов, Тип("Дата")); КонецЕсли;
		Если МассивТипов.Количество() > 0 Тогда УдалитьВсеВхожденияТипаИзМассиваТипов(МассивТипов, Тип("Строка")); КонецЕсли;
		Если МассивТипов.Количество() > 0 Тогда УдалитьВсеВхожденияТипаИзМассиваТипов(МассивТипов, Тип("Число")); КонецЕсли;
		Если МассивТипов.Количество() > 0 Тогда УдалитьВсеВхожденияТипаИзМассиваТипов(МассивТипов, Тип("Булево")); КонецЕсли;
		
		Возврат МассивТипов.Количество() = 0;
	Иначе
		Возврат ЭтоДата(ПроверяемоеЗначение) Или ЭтоСтрока(ПроверяемоеЗначение) Или ЭтоБулево(ПроверяемоеЗначение) Или ЭтоЧисло(ПроверяемоеЗначение);
	КонецЕсли;
	
КонецФункции

#Область Тип_Дата

// Проверяет значение типа дата.
//  Если значение "Неопределено", тогда значение заменяется на Дата(1,1,1).
//
// Параметры:
//  ТекущаяДата - Дата.
//
Процедура ЕслиДатаНеопределеноТоНовая(ТекущаяДата) Экспорт
	
	Если ТекущаяДата = Неопределено Тогда ТекущаяДата = Дата(1,1,1); КонецЕсли;
	
КонецПроцедуры

// Очищает значение типа дата.
//  Любое значение типа дата заменяется на Дата(1,1,1).
//
// Параметры:
//  ТекущаяДата - Дата.
//
Процедура ОчиститьЗначениеДаты(ТекущаяДата) Экспорт
	
	ТекущаяДата = Дата(1,1,1);
	
КонецПроцедуры

// Функция - Это пустая дата.
//  Сверяет значение параметра "ТекущаяДата" со значением Дата(1,1,1).
//
// Параметры:
//  ТекущаяДата	 - Дата.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ЭтоПустаяДата(ТекущаяДата) Экспорт
	
	Возврат ТекущаяДата = Дата(1,1,1);
	
КонецФункции

// Функция - Это дата.
//
// Параметры:
//  ПроверяемоеЗначение	 - Произвольный.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ЭтоДата(ПроверяемоеЗначение) Экспорт
	
	Возврат ТипЗнч(ПроверяемоеЗначение) = Тип("Дата");
	
КонецФункции

#КонецОбласти

#Область Тип_Строка

// Функция - Это строка.
//
// Параметры:
//  ПроверяемоеЗначение	 - Произвольный.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ЭтоСтрока(ПроверяемоеЗначение) Экспорт
	
	Возврат ТипЗнч(ПроверяемоеЗначение) = Тип("Строка");
	
КонецФункции

#КонецОбласти

#Область Тип_Булево

// Функция - Это булево.
//
// Параметры:
//  ПроверяемоеЗначение	 - Произвольный.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ЭтоБулево(ПроверяемоеЗначение) Экспорт
	
	Возврат ТипЗнч(ПроверяемоеЗначение) = Тип("Булево");
	
КонецФункции

#КонецОбласти

#Область Тип_Число

// Функция - Это число.
//
// Параметры:
//  ПроверяемоеЗначение	 - Произвольный.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ЭтоЧисло(ПроверяемоеЗначение) Экспорт
	
	Возврат ТипЗнч(ПроверяемоеЗначение) = Тип("Число");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

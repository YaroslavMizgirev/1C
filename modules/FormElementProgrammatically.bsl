//////////////////////////////////////////////////////////////////////////////////
//
//	Общий модуль: Элементы формы программно
//	
//	Автор и разработчик: Мизгирев Ярослав Михайлович
//	При поддержке участников сообщества GitHub
//	https://github.com/YaroslavMizgirev/1C
//	telegram: https://t.me/YaroslavMizgirev
//	
//////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ВнешнееСоединение Или ТолстыйКлиентОбычноеПриложение Тогда

#Область ПрограммныйИнтерфейс

// Создать элемент формы.
//
// Параметры:
//  Форма				-	ФормаКлиентскогоПриложения - Форма клиентского приложения.
//  ИмяЭлемента			-	Строка - Имя нового элемента.
//  ТипЭлемента			-	Тип - Тип нового элемента.
//  РодительЭлемента	-	Неопределено,
//							ГруппаФормы,
//							ТаблицаФормы,
//							ФормаКлиентскогоПриложения - Родитель для нового элемента. Если не указан, то элемент будет вставлен на самый верхний уровень.
//  ЭлементПеред		-	Неопределено,
//							ДекорацияФормы,
//							ГруппаФормы,
//							КнопкаФормы,
//							ТаблицаФормы,
//							ПолеФормы - Элемент, перед которым должен быть вставлен новый элемент. Если не указан, то элемент будет вставлен в конец.
//
Процедура СоздатьЭлементФормы(Форма,ИмяЭлемента,ТипЭлемента,РодительЭлемента=Неопределено,ЭлементПеред=Неопределено) Экспорт
	
	Если ЭлементПеред = Неопределено Тогда
		Если РодительЭлемента = Неопределено Тогда
			НовыйЭлемент = Форма.Элементы.Добавить(_ОбработкаСтрок.ОчиститьОтЗапрещенныхСимволов(ИмяЭлемента),ТипЭлемента);
		Иначе
			НовыйЭлемент = Форма.Элементы.Добавить(_ОбработкаСтрок.ОчиститьОтЗапрещенныхСимволов(ИмяЭлемента),ТипЭлемента,РодительЭлемента);
		КонецЕсли;
	Иначе
		НовыйЭлемент = Форма.Элементы.Вставить(_ОбработкаСтрок.ОчиститьОтЗапрещенныхСимволов(ИмяЭлемента),ТипЭлемента,РодительЭлемента,ЭлементПеред);
	КонецЕсли;
	
КонецПроцедуры

// Функция - Создать элемент формы с возвратом
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения																											 - Форма клиентского приложения.
//  ИмяЭлемента			 - Строка																																					 - Имя нового элемента.
//  ТипЭлемента			 - Тип																																						 - Тип нового элемента.
//  РодительЭлемента - Неопределено, ГруппаФормы, ТаблицаФормы, ФормаКлиентскогоПриложения						 - Родитель для нового элемента. Если не указан, то вставляется на верхний уровень.
//  ЭлементПеред		 - Неопределено. ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы - Элемент, перед которым должен быть вставлен новый элемент. Если не указан, то элемент будет вставлен в конец.
// 
// Возвращаемое значение:
//   - ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы.
//
Функция СоздатьЭлементФормыСВозвратом(Форма,ИмяЭлемента,ТипЭлемента,РодительЭлемента=Неопределено,ЭлементПеред=Неопределено) Экспорт
	
	Если ЭлементПеред = Неопределено Тогда
		Если РодительЭлемента = Неопределено Тогда
			НовыйЭлемент = Форма.Элементы.Добавить(_ОбработкаСтрок.ОчиститьОтЗапрещенныхСимволов(ИмяЭлемента),ТипЭлемента);
		Иначе
			НовыйЭлемент = Форма.Элементы.Добавить(_ОбработкаСтрок.ОчиститьОтЗапрещенныхСимволов(ИмяЭлемента),ТипЭлемента,РодительЭлемента);
		КонецЕсли;
	Иначе
		НовыйЭлемент = Форма.Элементы.Вставить(_ОбработкаСтрок.ОчиститьОтЗапрещенныхСимволов(ИмяЭлемента),ТипЭлемента,РодительЭлемента,ЭлементПеред);
	КонецЕсли;
	Возврат НовыйЭлемент;
	
КонецФункции

// Создать обычную группу без отображения.
//
// Параметры:
//  Форма											 - ФормаКлиентскогоПриложения - Форма клиентского приложения.
//  ИмяГруппы									 - Строка - Имя элемента на форме.
//  РодительГруппы						 - Строка, Элементы - достаточно указать имя элемента формы или передать элемент формы.
//  ГруппировкаОбычнойГруппы	 - Число - Принимаемые значения: 1 - Вертикальная; 2 - ГоризонтальнаяЕслиВозможно; 3 - ГоризонтальнаяВсегда; 0 - Авто.
//  РастягиватьГоризонтально	 - Число - Принимаемые значения: 1 - ИСТИНА; 2 - ЛОЖЬ; 0 - Авто.
//  РастягиватьВертикально		 - Число - Принимаемые значения: 1 - ИСТИНА; 2 - ЛОЖЬ; 0 - Авто.
//  СтруктураСвойств					 - Структура - Содержит значения свойств, где ключ название свойства и значение.
//  ЭлементПеред							 - Строка, Элементы - достаточно указать имя элемента формы перед которым требуется вставить новый элемент или передать элемент формы.
//
Функция СздГруппаОбычнаяБезОтображения(Форма,ИмяГруппы,РодительГруппы,ГруппировкаОбычнойГруппы=0,РастягиватьГоризонтально=0,РастягиватьВертикально=0,СтруктураСвойств=Неопределено,ЭлементПеред=Неопределено) Экспорт
	
	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
	ОпределитьЭлементФормы(Форма, РодительГруппы);
	ОпределитьЭлементФормы(Форма, ЭлементПеред);
	
	НовыйЭлемент = СоздатьЭлементФормыСВозвратом(Форма, ИмяГруппы, Тип("ГруппаФормы"), РодительГруппы, ЭлементПеред);
	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
	НовыйЭлемент.ОтображатьЗаголовок = Ложь;
	
	ПолучитьСостояниеГруппировкиЭлемента(НовыйЭлемент, ГруппировкаОбычнойГруппы);
	ПолучитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент, РастягиватьГоризонтально);
	ПолучитьСостояниеРастягиванияЭлементаПоВертикали(НовыйЭлемент, РастягиватьВертикально);
	УстановитьСвойстваЭлементу(НовыйЭлемент,СтруктураСвойств);
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Создание поля популярных видов.
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения	 - Форма клиентского приложения.
//  ИмяПоля					 - Строка											 - Имя элемента на форме
//  РодительПоля		 - Строка, Элементы						 - достаточно указать имя элемента формы или передать элемент формы.
//  Заголовок				 - Строка											 - заголовок элемента
//  ШифрВидаПоля		 - Число											 - возможно указать шифр следующих значений: 1 - ПолеВвода; 2 - ПолеФлажка; 3 - ПолеИндикатора; 4 - ПолеПереключателя; 5 - ПолеПериода; 6 - ПолеHTMLДокумента; 0 - Без указания типа, тип можно передать в структуре свойств.
//  ПутьКДанным			 - Строка											 - Путь к данным значения.
//  СтруктураСвойств - Структура									 - Содержит значения свойств, где ключ название свойства и значение.
//  СтруктураСобытий - Структура									 - Содержит значения событий, где ключ название события и в значение название процедуры/функции тип "строка".
//  ЭлементПеред		 - Строка, Элементы						 - достаточно указать имя элемента формы или передать элемент формы.
//
Функция СздПоле(Форма,ИмяПоля,РодительПоля,Заголовок,ШифрВидаПоля=0,ПутьКДанным="",СтруктураСвойств=Неопределено,СтруктураСобытий=Неопределено,ЭлементПеред=Неопределено) Экспорт
	
	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
	ЕслиСтруктураНеопределеноТоНовая(СтруктураСобытий);
	ОпределитьЭлементФормы(Форма,РодительПоля);
	ОпределитьЭлементФормы(Форма,ЭлементПеред);
	
	НовыйЭлемент = СоздатьЭлементФормыСВозвратом(Форма, ИмяПоля, Тип("ПолеФормы"), РодительПоля, ЭлементПеред);
	Если ШифрВидаПоля <> 0 Тогда
		НаборВидов = "ПолеВвода
		|ПолеФлажка
		|ПолеИндикатора
		|ПолеПереключателя
		|ПолеПериода
		|ПолеHTMLДокумента";
		ВидПоля = СокрЛП(СтрПолучитьСтроку(НаборВидов, ШифрВидаПоля));
		НовыйЭлемент.Вид = ВидПоляФормы[ВидПоля];
	КонецЕсли;
	
	Если Заголовок <> "" Тогда НовыйЭлемент.Заголовок = Заголовок КонецЕсли;
	Если ПутьКДанным <> "" Тогда НовыйЭлемент.ПутьКДанным = ПутьКДанным КонецЕсли;
	
	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
	УстановитьСобытияЭлементу(НовыйЭлемент, СтруктураСобытий);
	
	Возврат НовыйЭлемент;
	
КонецФункции

//Удалить РАНЕЕ СОЗДАННЫЕ ПРОГРАММНО элементы.
//
//Параметры:
//  УдаляемыеЭлементы - Массив Из Строка - Содержит строковые типы с именами удаляемых элементов.
//
Процедура УдалитьЭлементы(Форма,УдаляемыеЭлементы) Экспорт
	
	Для Каждого текЭлемент Из УдаляемыеЭлементы Цикл
		Если Форма.Элементы.Найти(текЭлемент) <> Неопределено Тогда
			Форма.Элементы.Удалить(Форма.Элементы[текЭлемент]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Удалить РАНЕЕ СОЗДАННЫЙ ПРОГРАММНО элемент.
//
//Параметры:
//  ИмяЭлемента - Строка - Имя элемента.
//
Процедура УдалитьЭлемент(Форма,ИмяЭлемента) Экспорт
	
	МассивУдаляемыхЭлементов = Новый Массив;
	МассивУдаляемыхЭлементов.Добавить(ИмяЭлемента);
	УдалитьЭлементы(Форма, МассивУдаляемыхЭлементов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Устанавливает элементу формы заданные свойства.
//
// Параметры:
//  Элемент									 - КомандаФормы.
//  СтруктураСвойств				 - Структура - Ключ - имя свойства элемента формы, Значение - значение свойства элемента формы.
//
Процедура УстановитьСвойстваЭлементу(Элемент,СтруктураСвойств)
	
	Для Каждого тСвойство Из СтруктураСвойств Цикл
		Элемент[тСвойство.Ключ] = тСвойство.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Установливает элементу формы заданные события.
//
// Параметры:
//  Элемент					 - Элементы.
//  СтруктураСобытий - Структура - ключ - название события, значение - название процедуры/функции.
//
Процедура УстановитьСобытияЭлементу(Элемент,СтруктураСобытий) Экспорт
	
	Для Каждого тСвойство Из СтруктураСобытий Цикл
		Элемент.УстановитьДействие(тСвойство.Ключ,тСвойство.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет значение структуры.
// Если значение "Неопределено", тогда значение заменяется на пустую структуру.
//
// Параметры:
//  ТекущаяСтруктура - Структура - Переданная структура или новая пустая структура.
//
Процедура ЕслиСтруктураНеопределеноТоНовая(ТекущаяСтруктура)
	
	Если ТекущаяСтруктура = Неопределено Тогда ТекущаяСтруктура = Новый Структура; КонецЕсли;
	
КонецПроцедуры

// Процедура - Определить элемент формы.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения - Форма клиентского приложения.
//  Элемент	 - Строка, Элементы - достаточно указать имя элемента формы или передать элемент формы.
//
Процедура ОпределитьЭлементФормы(Форма,Элемент)
	
	Если Элемент = Неопределено Тогда Возврат; КонецЕсли;
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		// может прийти "ИмяТаблицы.КоманднаяПанель"
		Иерархия = СтрРазделить(Элемент, ".");
		Элемент = Форма.Элементы;
		Для Каждого Шаг Из Иерархия Цикл
			Элемент = Элемент[Шаг];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Получить состояние группировки элемента.
//
// Параметры:
//  Элемент		 - ЭлементФормы.
//  Состояние	 - Число.
//
Процедура ПолучитьСостояниеГруппировкиЭлемента(Элемент,Состояние)
	
	Если Состояние = 1 Тогда
		Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ИначеЕсли Состояние = 2 Тогда
		Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	ИначеЕсли Состояние = 3 Тогда
		Элемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Получить состояние растягивания элемента по горизонтали.
//
// Параметры:
//  Элемент		 - ЭлементФормы.
//  Состояние	 - Число.
//
Процедура ПолучитьСостояниеРастягиванияЭлементаПоГоризонтали(Элемент,Состояние)
	
	Если Состояние = 1 Тогда
		Элемент.РастягиватьПоГоризонтали = Истина;
	ИначеЕсли Состояние = 2 Тогда
		Элемент.РастягиватьПоГоризонтали = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Получить состояние растягивания элемента по вертикали.
//
// Параметры:
//  Элемент		 - ЭлементФормы.
//  Состояние	 - Число.
//
Процедура ПолучитьСостояниеРастягиванияЭлементаПоВертикали(Элемент,Состояние)
	
	Если Состояние = 1 Тогда
		Элемент.РастягиватьПоВертикали = Истина;
	ИначеЕсли Состояние = 2 Тогда
		Элемент.РастягиватьПоВертикали = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область Доделать

//// Создать обычную группу.
////
//// Параметры:
////  Форма											 - ФормаКлиентскогоПриложения - Форма на которой создаются элементы.
////  ИмяГруппы									 - Строка - Имя элемента на форме.
////  РодительГруппы						 - Строка - достаточно указать название элемента формы.
////  													 - Элементы - можно в качестве родителя передать элемент формы.
////  Заголовок									 - Строка - Заголовок группы.
////  ГруппировкаОбычнойГруппы	 - Число - Принимаемые значения: 1 - Вертикальная; 2 - ГоризонтальнаяЕслиВозможно; 3 - ГоризонтальнаяВсегда; 0 - Авто.
////  РастягиватьГоризонтально	 - Число - Принимаемые значения: 1 - ИСТИНА; 2 - ЛОЖЬ; 0 - Авто.
////  РастягиватьВертикально		 - Число - Принимаемые значения: 1 - ИСТИНА; 2 - ЛОЖЬ; 0 - Авто.
////  СтруктураСвойств					 - Структура - Содержит значения свойств, где ключ название свойства и значение.
////  ЭлементПеред							 - Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент.
////  													 - Элементы - можно передать элемент формы.
////
//Функция СздГруппаОбычная(Форма,ИмяГруппы,РодительГруппы,Заголовок="",ГруппировкаОбычнойГруппы=0,РастягиватьГоризонтально=0,РастягиватьВертикально=0,СтруктураСвойств=Неопределено,ЭлементПеред=Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
//	ОпределитьЭлементФормы(Форма,РодительГруппы);
//	ОпределитьЭлементФормы(Форма,ЭлементПеред);
//	
//	НовыйЭлемент = СоздатьЭлементФормы(Форма,ИмяГруппы,Тип("ГруппаФормы"),РодительГруппы,ЭлементПеред);
//	НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
//	НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
//	НовыйЭлемент.ОтображатьЗаголовок = Истина;
//	
//	ПолучитьСостояниеГруппировкиЭлемента(НовыйЭлемент, ГруппировкаОбычнойГруппы);
//	ПолучитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент, РастягиватьГоризонтально);
//	ПолучитьСостояниеРастягиванияЭлементаПоВертикали(НовыйЭлемент, РастягиватьВертикально);
//	Если Заголовок <> "" Тогда НовыйЭлемент.Заголовок = Заголовок КонецЕсли;
//	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
//	
//	Возврат НовыйЭлемент;
//	
//КонецФункции

//// Создать группу страниц
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяГруппы - Строка - Имя элемента на форме
////	РодительГруппы	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	РастягиватьГоризонтально - Число - Принимаемые значения:
////					1 - ИСТИНА
////					2 - ЛОЖЬ
////					0 - Авто
////	РастягиватьВертикально - Число - Принимаемые значения:
////					1 - ИСТИНА
////					2 - ЛОЖЬ
////					0 - Авто
////	ПриСменеСтраницы - Строка - При смене страницы???
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и значение
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздГруппаСтраниц(Форма,
//	ИмяГруппы,
//	РодительГруппы,
//	РастягиватьГоризонтально = 0,
//	РастягиватьВертикально = 0,
//	ПриСменеСтраницы = "", 
//	СтруктураСвойств = Неопределено,
//	ЭлементПеред = Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);		
//	ОпределитьЭлементФормы(Форма,РодительГруппы);
//	ОпределитьЭлементФормы(Форма,ЭлементПеред);
//	
//	
//	НовыйЭлемент = СоздатьЭлементФормы(Форма,ИмяГруппы,Тип("ГруппаФормы"),РодительГруппы,ЭлементПеред);	                  
//	НовыйЭлемент.Вид = ВидГруппыФормы.Страницы;
//		
//	ПолучитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент,РастягиватьГоризонтально);	
//	ПолучитьСостояниеРастягиванияЭлементаПоВертикали(НовыйЭлемент,РастягиватьВертикально);	
//	
//	Если ПриСменеСтраницы <> "" Тогда НовыйЭлемент.ПриСменеСтраницы = ПриСменеСтраницы КонецЕсли;	
//	
//	УстановитьСвойстваЭлементу(НовыйЭлемент,СтруктураСвойств);
//	
//	Возврат НовыйЭлемент;
//	
//КонецФункции

//// Создать страницу группы страницы
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяСтраницы - Строка - Имя элемента на форме
////	ГруппаСтраницы	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	Заголовок		- Строка - Заголовок страницы
////	ГруппировкаОбычнойГруппы - Число - Принимаемые значения:
////					1 - Вертикальная
////					2 - ГоризонтальнаяЕслиВозможно
////					3 - ГоризонтальнаяВсегда
////					0 - Авто
////	РастягиватьГоризонтально - Число - Принимаемые значения:
////					1 - ИСТИНА
////					2 - ЛОЖЬ
////					0 - Авто
////	РастягиватьВертикально - Число - Принимаемые значения:
////					1 - ИСТИНА
////					2 - ЛОЖЬ
////					0 - Авто
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и значение
////	СтраницаПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздСтраница(Форма,
//	ИмяСтраницы,
//	ГруппаСтраницы,
//	Заголовок = "",
//	ГруппировкаОбычнойГруппы = 0,
//	РастягиватьГоризонтально = 0,
//	РастягиватьВертикально = 0,
//	СтруктураСвойств = Неопределено,
//	СтраницаПеред = Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);		
//	ОпределитьЭлементФормы(Форма,ГруппаСтраницы);
//	ОпределитьЭлементФормы(Форма,СтраницаПеред);	
//	
//	НовыйЭлемент = СоздатьЭлементФормы(Форма,ИмяСтраницы,Тип("ГруппаФормы"),ГруппаСтраницы,СтраницаПеред);	                  
//	НовыйЭлемент.Вид = ВидГруппыФормы.Страница;
//	
//	ПолучитьСостояниеГруппировкиЭлемента(НовыйЭлемент,ГруппировкаОбычнойГруппы);
//	ПолучитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент,РастягиватьГоризонтально);	
//	ПолучитьСостояниеРастягиванияЭлементаПоВертикали(НовыйЭлемент,РастягиватьВертикально);	

//	Если Заголовок <> "" Тогда НовыйЭлемент.Заголовок = Заголовок КонецЕсли;
//	
//	УстановитьСвойстваЭлементу(НовыйЭлемент,СтруктураСвойств);
//	
//	Возврат НовыйЭлемент;
//	
//КонецФункции

//// Создать обычную группу
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяГруппы - Строка - Имя элемента на форме
////	РодительПанели	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и значение
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздГруппаКоманднаяПанель(Форма,
//	ИмяПанели,
//	РодительПанели,
//	СтруктураСвойств = Неопределено,
//	ЭлементПеред = Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
//	ОпределитьЭлементФормы(Форма,РодительПанели);
//	ОпределитьЭлементФормы(Форма,ЭлементПеред);
//	
//	НовыйЭлемент = СоздатьЭлементФормы(Форма,ИмяПанели,Тип("ГруппаФормы"),РодительПанели,ЭлементПеред);
//	НовыйЭлемент.Вид = ВидГруппыФормы.КоманднаяПанель;
//	
//	УстановитьСвойстваЭлементу(НовыйЭлемент,СтруктураСвойств);
//	
//	Возврат НовыйЭлемент;
//	
//КонецФункции

//// Создать группу - подменю.
////
//// Параметры:
////  Форма											 - ФормаКлиентскогоПриложения - Форма на которой создаются элементы.
////  ИмяГруппы									 - Строка - Имя элемента на форме.
////  РодительГруппы						 - Строка - Достаточно указать название элемента формы.
////  													 - Элементы - Можно передать элемент формы.
////  Заголовок									 - Строка - Заголовок группы.
////  РастягиватьГоризонтально	 - Число - Принимаемые значения: 1 - ИСТИНА; 2 - ЛОЖЬ; 0 - Авто.
////  РастягиватьВертикально		 - Число - Принимаемые значения: 1 - ИСТИНА; 2 - ЛОЖЬ; 0 - Авто.
////  СтруктураСвойств					 - Неопределено - Значение по умолчанию.
////  													 - Структура - Содержит значения свойств, где ключ название свойства и в значение произвольное значение свойства.
////  ЭлементПеред							 - Строка - Достаточно указать название элемента формы перед которым требуется вставить новый элемент.
////  													 - Элементы - Можно передать элемент формы.
////
//// Мизгирев Я.М. 15.04.2024 {
//Функция СздГруппаПодменю(Форма,ИмяГруппы,РодительГруппы,Заголовок="",РастягиватьГоризонтально=0,РастягиватьВертикально=0,СтруктураСвойств=Неопределено,ЭлементПеред=Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
//	ОпределитьЭлементФормы(Форма, РодительГруппы);
//	ОпределитьЭлементФормы(Форма, ЭлементПеред);
//	
//	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяГруппы, Тип("ГруппаФормы"), РодительГруппы, ЭлементПеред);
//	НовыйЭлемент.Вид = ВидГруппыФормы.Подменю;
//	ПолучитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент, РастягиватьГоризонтально);
//	ПолучитьСостояниеРастягиванияЭлементаПоВертикали(НовыйЭлемент, РастягиватьВертикально);
//	Если Заголовок <> "" Тогда НовыйЭлемент.Заголовок = Заголовок КонецЕсли;
//	
//	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
//	Возврат НовыйЭлемент;
//	
//КонецФункции
//// } Мизгирев Я.М. 15.04.2024

//// Создание поля популярных видов
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяПоля - Строка - Имя элемента на форме
////	РодительПоля	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	Заголовок		- Строка - заголовок элемента
////	тВидФлажка		- Число - возможные варианты:
////					0 - Авто
////					1 - Флажок
////					2 - Тумблер
////					3 - Выключатель
////	ПутьКДанным		- Строка - Путь к данным значения
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и значение
////	СтруктураСобытий - Структура - Содержит значения событий, где ключ название события и в значение название процедуры тип "строка"
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздПолеФлажок(Форма,
//	ИмяПоля,
//	РодительПоля,
//	Заголовок,
//	тВидФлажка = 0,
//	ПутьКДанным = "",
//	СтруктураСвойств = Неопределено,
//	СтруктураСобытий = Неопределено,
//	ЭлементПеред = Неопределено) Экспорт
//	
//	НовыйЭлемент = СздПоле(Форма,ИмяПоля,РодительПоля,Заголовок,2,ПутьКДанным,СтруктураСвойств,СтруктураСобытий,ЭлементПеред);
//	Если тВидФлажка <> 0 Тогда
//		НаборВидов = "Флажок
//		|Тумблер	
//		|Выключатель";
//		ВидПоля = СокрЛП(СтрПолучитьСтроку(НаборВидов,тВидФлажка));
//		НовыйЭлемент.ВидФлажка = ВидФлажка[ВидПоля];
//	КонецЕсли;	
//	
//КонецФункции

////Быстрая функция по созданию декорации надпись
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяДекорации - Строка - Имя элемента на форме
////	РодительДекорации	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	ЗаголовокДекорации - Строка - текст который содержит декорация
////	РастягиватьПоГоризонтали - Булево - растянуть надпись на всю ширину формы
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздДекорацияНадпись(Форма,
//	ИмяДекорации,
//	РодительДекорации,
//	ЗаголовокДекорации,
//	РастягиватьПоГоризонтали = ИСТИНА,
//	ЭлементПеред = Неопределено) Экспорт
//	
//	ОпределитьЭлементФормы(Форма,РодительДекорации);
//	ОпределитьЭлементФормы(Форма,ЭлементПеред);	
//	
//	НовыйЭлемент = СздДекорация(Форма,ИмяДекорации,РодительДекорации,,,ЭлементПеред);
//	
//	НовыйЭлемент.Заголовок = ЗаголовокДекорации;
//	
//	Если РастягиватьПоГоризонтали Тогда
//		НовыйЭлемент.АвтоМаксимальнаяШирина = ЛОЖЬ;
//		НовыйЭлемент.РастягиватьПоГоризонтали = ИСТИНА;	
//	КонецЕсли;
//		
//	Возврат НовыйЭлемент;
//	
//КонецФункции

////Быстрая функция по созданию декорации картинки
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяДекорации - Строка - Имя элемента на форме
////	РодительДекорации	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	ИмяКартинки - Строка - Имя картинки в дереве метаданных
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздДекорацияКартинка(Форма,
//	ИмяДекорации,
//	РодительДекорации,
//	ИмяКартинки,
//	ЭлементПеред = Неопределено) Экспорт
//	
//	НовыйЭлемент = СздДекорация(Форма,ИмяДекорации,РодительДекорации,,,ЭлементПеред);
//	
//	НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
//	НовыйЭлемент.Картинка = БиблиотекаКартинок[ИмяКартинки];
//	
//	Возврат НовыйЭлемент;
//	
//КонецФункции

////Общая функция создания декорации с видом надпись и картинка
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяДекорации - Строка - Имя элемента на форме
////	РодительДекорации	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и значение
////	СтруктураСобытий - Структура - Содержит значения событий, где ключ название события и в значение название процедуры тип "строка"
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздДекорация(Форма,
//	ИмяДекорации,
//	РодительДекорации,
//	СтруктураСвойств = Неопределено,
//	СтруктураСобытий = Неопределено,                                            
//	ЭлементПеред = Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСобытий);
//	ОпределитьЭлементФормы(Форма,РодительДекорации);
//	ОпределитьЭлементФормы(Форма,ЭлементПеред);
//	
//	НовыйЭлемент = СоздатьЭлементФормы(Форма,ИмяДекорации,Тип("ДекорацияФормы"),РодительДекорации,ЭлементПеред);
//	
//	УстановитьСвойстваЭлементу(НовыйЭлемент,СтруктураСвойств);
//	УстановитьСобытияЭлементу(НовыйЭлемент,СтруктураСобытий);
//	
//	Возврат НовыйЭлемент;
//	
//КонецФункции

////Общая функция создания кнопки.
////
//// Параметры:
////	Форма						 - ФормаКлиентскогоПриложения - Форма на которой создаются элементы.
////	ИмяКнопки				 - Строка - Имя элемента на форме.
////	РодительКнопки	 - Строка - Достаточно указать название элемента формы.
////									 - Элементы - Можно в качестве родителя передать элемент формы.
////	ЗаголовокКнопки	 - Строка - Отображаемый заголовок кнопки.
////	ИмяКоманды			 - Строка - Имя команды.
////	ВидКнопки				 - Число - Принимаемые значения: 1 - Гиперссылка, 2 - Гиперссылка командной панели, 3 - Кнопка командной панели, 4 - Обычная кнопка.
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и в значение произвольное значение свойства.
////	СтруктураСобытий - Структура - Содержит значения событий, где ключ название события и в значение название процедуры тип "строка".
////	ЭлементПеред		 - Строка - Достаточно указать название элемента формы перед которым требуется вставить новый элемент.
////									 - Элементы - Можно передать элемент формы.
////
//Функция СздКнопка(Форма,ИмяКнопки,РодительКнопки,ЗаголовокКнопки="",ИмяКоманды="",ВидКнопки=4,СтруктураСвойств=Неопределено,ЭлементПеред=Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
//	ОпределитьЭлементФормы(Форма, РодительКнопки);
//	ОпределитьЭлементФормы(Форма, ЭлементПеред);
//	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяКнопки, Тип("КнопкаФормы"), РодительКнопки, ЭлементПеред);
//	Если НЕ ВидКнопки = 0 Тогда
//		НаборВидов = "Гиперссылка
//		|ГиперссылкаКоманднойПанели
//		|КнопкаКоманднойПанели
//		|ОбычнаяКнопка";
//		ВидПоля = СокрЛП(СтрПолучитьСтроку(НаборВидов, ВидКнопки));
//		НовыйЭлемент.Вид = ВидКнопкиФормы[ВидПоля];
//	КонецЕсли;
//	Если НЕ ЗаголовокКнопки = "" Тогда НовыйЭлемент.Заголовок = ЗаголовокКнопки; КонецЕсли;
//	Если НЕ ИмяКоманды = "" Тогда НовыйЭлемент.ИмяКоманды = ИмяКоманды; КонецЕсли;
//	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
//	Возврат НовыйЭлемент;
//	
//КонецФункции

//// Создаем динамический список версия 2.0
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяСписка - Строка - Имя будущей таблицы формы
////	РодительСписка	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	ТекстЗапроса	- Строка - если не заполнен, то обязательно должен быть заполнен параметр ТаблицаСписка
////	ПараметрыЗапроса - Структура - Содержит параметры для запроса, где ключ - имя параметры, а значение соответственно
////  ТаблицаСписка	- Строка - имя таблицы списка,
////	СтруктураКолонок 	- Структура - Ключ имя колонки в динамическом списке, значение это заголовок колонки
////	                   Для сложных случаев лучше передать "неопределено" и впоспользоваться процедурой формирования колонок таблицы формы этого же модуля ДФИ
////	СвояКоманднаяПанель - Булево - используется если требуется снять флаг "Автозаполнение" и наполнить самостоятельно
////		Из-за специфики работы, нет программной возможности снятия флага "Автозаполнение", по этому создается своя командная панель, а стандартная скрывается полностью.
////		Имя новой командной панели <ИмяСписка>+"КоманднаяПанель2"
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и значение
////	СтруктураСобытий - Структура - Содержит значения событий, где ключ название события и в значение название процедуры тип "строка"
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздДинамическийСписок(Форма,
//	ИмяСписка = "Список", 
//	РодительСписка,
//	ТекстЗапроса = "", 			
//	ПараметрыЗапроса = Неопределено,
//	ТаблицаСписка = "",
//	СтруктураКолонок = Неопределено,                 
//	СтруктураСвойств = Неопределено,
//	СтруктураСобытий = Неопределено,
//	СвояКоманднаяПанель = ЛОЖЬ,
//	ЭлементПеред = Неопределено
//	) Экспорт
//																																				
//	СоздатьРеквизит(Форма,ИмяСписка,ОписаниеТипаДинамическийСписок());             
//	РеквизитДинамическийСписок = Форма[ИмяСписка]; 
//	Если ТекстЗапроса = "" Тогда
//		РеквизитДинамическийСписок.ПроизвольныйЗапрос = ЛОЖЬ;
//		РеквизитДинамическийСписок.ОсновнаяТаблица = ТаблицаСписка;
//	Иначе
//		РеквизитДинамическийСписок.ПроизвольныйЗапрос = ИСТИНА;
//		РеквизитДинамическийСписок.ТекстЗапроса = ТекстЗапроса;
//		Если ТаблицаСписка <> "" Тогда РеквизитДинамическийСписок.ОсновнаяТаблица = ТаблицаСписка; КонецЕсли;		
//	КонецЕсли;
//	
//	ЕслиСтруктураНеопределеноТоНовая(ПараметрыЗапроса);
//	УстановитьПараметрыЗапросу(РеквизитДинамическийСписок,ПараметрыЗапроса);
//	
//	ТаблицаФормы = СздТаблицаФормы(Форма,ИмяСписка,РодительСписка,ИмяСписка,СтруктураКолонок,СтруктураСвойств,СтруктураСобытий,СвояКоманднаяПанель,ЭлементПеред); 
//	
//	Возврат ТаблицаФормы;
//	
//КонецФункции 

//// Создаем колонку для Таблицы формы (Динамического списка).
////
//// Параметры:
////	Форма						 - ФормаКлиентскогоПриложения	 - Форма на которой создаются элементы.
////	ИмяКолонки			 - Строка - Имя будущей колонки.
////	Родитель				 - Строка		 - Достаточно указать название элемента формы внутри которого будет вставлен новый элемент.
////									 - Элементы	 - Можно передать элемент формы.
////	ТипКолонки			 - Число - Принимаемые значения: 0 - Поле ввода, 1 - Поле надписи, 2 - Поле флажка, 3 - Поле картинки.
////	Заголовок				 - Строка - Заголовок колонки.
////	ПутьКДанным			 - Строка - Путь к данным, не забывайте про точку и "Объект", пример "Объект.Товары.Номенклатура".
////	СтруктураСвойств - Структура		 - Содержит значения свойств, где ключ название свойства и в значение произвольное значение свойства. По умолчанию - Неопределено.
////	СтруктураСобытий - Структура		 - Содержит значения событий, где ключ название события и в значение название процедуры тип "строка". По умолчанию - Неопределено.
////	ЭлементПеред		 - Строка		 - Достаточно указать название элемента формы перед которым требуется вставить новый элемент.
////									 - Элементы	 - Можно передать элемент формы.
////
//Функция СздКолонкаТаблицыФормы(Форма,ИмяКолонки,Родитель,ТипКолонки=0,Заголовок="",ПутьКДанным,ОтображатьШапку=Истина,ОтображатьПодвал=Ложь,СтруктураСвойств=Неопределено,СтруктураСобытий=Неопределено,ЭлементПеред=Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСобытий);
//	ОпределитьЭлементФормы(Форма, Родитель);
//	ОпределитьЭлементФормы(Форма, ЭлементПеред);
//	
//	Если ТипКолонки <> 0 Тогда
//		НаборВидов = "ПолеНадписи
//		|ПолеФлажка
//		|ПолеКартинки";
//		ВидПоля = СокрЛП(СтрПолучитьСтроку(НаборВидов, ТипКолонки));
//	Иначе
//		ВидПоля = "ПолеВвода";
//	КонецЕсли;
//	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяКолонки, Тип("ПолеФормы"), Родитель, ЭлементПеред);
//	НовыйЭлемент.Вид = ВидПоляФормы[ВидПоля];
//	НовыйЭлемент.ПутьКДанным = ПутьКДанным;
//	НовыйЭлемент.ОтображатьВШапке = ОтображатьШапку;
//	НовыйЭлемент.ОтображатьВПодвале = ОтображатьПодвал;
//	УстановитьСвойстваЭлементу(НовыйЭлемент,СтруктураСвойств);
//	УстановитьСобытияЭлементу(НовыйЭлемент,СтруктураСобытий);
//	Возврат НовыйЭлемент;
//	
//КонецФункции

//// Создаем Таблицу формы.
////
//// Параметры:
////	Форма											 - ФормаКлиентскогоПриложения	 - Форма на которой создаются элементы
////	ИмяТаблицы								 - Строка											 - Имя будущей таблицы
////	РодительТаблицы						 - Строка											 - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////														 - Элементы										 - можно передать элемент формы
////	ПутьКДанным								 - Строка											 - Путь к данным реквизита
////	СтруктураКолонок					 - Неопределено								 - По умолчанию.
////														 - Структура									 - Содержит значения колонок, где ключ имя колонки и значение это заголовок если необходимо изменить, иначе можно передать ""
////	СтруктураСвойствКолонок		 - Неопределено								 - По умолчанию.
////														 - Структура									 - Где ключ имя колонки и значение Структура, где ключ название свойства и в значение произвольное значение свойства.
////	СтруктураСобытийКолонок		 - Неопределено								 - По умолчанию.
////														 - Структура									 - Где ключ имя колонки и значение Структура, где ключ название события и в значение название процедуры тип "строка".
////	СтруктураСвойств					 - Неопределено								 - По умолчанию.
////														 - Структура									 - Содержит значения свойств, где ключ имя колонки и в значение Структура, где ключ - название свойства и в значение произвольное значение свойства.
////	СтруктураСобытий					 - Неопределено								 - По умолчанию.
////														 - Структура									 - Содержит значения событий, где ключ название события и в значение название процедуры тип "строка"
////	СвояКоманднаяПанель				 - Булево											 - используется если требуется снять флаг "Автозаполнение" и наполнить самостоятельно
////																														 Из-за специфики работы, нет программной возможности снятия флага "Автозаполнение", 
////																														 по этому создается своя командная панель, а стандартная скрывается полностью.
////																														 Имя новой командной панели <ИмяСписка>+"КоманднаяПанель2".
////																														 Ложь - По умолчанию.
////	ЭлементПеред							 - Неопределено								 - По умолчанию.
////														 - Строка											 - Достаточно указать название элемента формы перед которым требуется вставить новый элемент
////														 - Элементы										 - Можно передать элемент формы
////
//Функция СздТаблицаФормы(Форма,ИмяТаблицы,РодительТаблицы,ПутьКДанным,СтруктураКолонок=Неопределено,СтруктураСвойствКолонок=Неопределено,СтруктураСобытийКолонок=Неопределено,СтруктураСвойств=Неопределено,СтруктураСобытий=Неопределено,СвояКоманднаяПанель=Ложь,ЭлементПеред=Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСобытий);
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураКолонок);
//	ОпределитьЭлементФормы(Форма,РодительТаблицы);
//	ОпределитьЭлементФормы(Форма,ЭлементПеред);
//	
//	Если СвояКоманднаяПанель Тогда
//		ГруппаДинамическогоСписка = СздГруппаОбычнаяБезОтображения(Форма,"ДополнительнаяГруппаКоманднаяПанель" + ИмяТаблицы,РодительТаблицы,1,1,1,,ЭлементПеред);
//		КоманднаяПанельСписка = СздГруппаКоманднаяПанель(Форма,ИмяТаблицы + "КоманднаяПанель2",ГруппаДинамическогоСписка);
//		ТаблицаФормы = СоздатьЭлементФормы(Форма,ИмяТаблицы,Тип("ТаблицаФормы"),ГруппаДинамическогоСписка);
//		ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
//	Иначе
//		ТаблицаФормы = СоздатьЭлементФормы(Форма,ИмяТаблицы,Тип("ТаблицаФормы"),РодительТаблицы,ЭлементПеред);
//	КонецЕсли;
//	ТаблицаФормы.ПутьКДанным = ПутьКДанным;
//	УстановитьСвойстваЭлементу(ТаблицаФормы,СтруктураСвойств);
//	УстановитьСобытияЭлементу(ТаблицаФормы,СтруктураСобытий);
//	
//	Для Каждого Колонка Из СтруктураКолонок Цикл
//		ЗаголовокКолонки = ?(ПустаяСтрока(Колонка.Значение), "", Колонка.Значение);
//		СздКолонкаТаблицыФормы(Форма, Колонка.Ключ, ТаблицаФормы,, ЗаголовокКолонки, ТаблицаФормы.ПутьКДанным + Колонка.Ключ,,, СтруктураСвойствКолонок, СтруктураСобытийКолонок);
//	КонецЦикла;
//	Возврат ТаблицаФормы;
//	
//КонецФункции

//// Создать группу колонок.
////
//// Параметры:
////	Форма						 - ФормаКлиентскогоПриложения - Форма на которой создаются элементы.
////	ИмяГруппы				 - Строка - Имя элемента на форме.
////	РодительГруппы	 - Строка - Достаточно указать название элемента формы.
////									 - Элементы - Можно передать элемент формы.
////	ГруппировкаГруппы - Число - Принимаемые значения:
////					1 - Горизонтальная;
////					2 - Вертикальная;
////					3 - В ячейке;
////					0 - Авто.
////	РастягиватьГоризонтально - Число - Принимаемые значения:
////					1 - Истина;
////					2 - Ложь;
////					0 - Авто.
////	ОтображатьВШапке - Булево - Если необходимо вывести заголовок.
////	Заголовок				 - Строка - Заголовок группы колонок.
////	СтруктураСвойств - Неопределено	 - По умолчанию.
////									 - Структура		 - Содержит значения свойств, где ключ название свойства и в значение произвольное значение свойства.
////	ЭлементПеред	 - Неопределено	 - По умолчанию.
////								 - Строка				 - Достаточно указать название элемента формы перед которым требуется вставить новый элемент.
////								 - Элементы			 - Можно передать элемент формы.
////
//// Мизгирев Я.М. 15.04.2024 {
//Функция СздГруппаКолонокТаблицыФормы(Форма,ИмяГруппы,РодительГруппы,ГруппировкаГруппы=0,РастягиватьГоризонтально=0,ОтображатьВШапке=Ложь,Заголовок="",СтруктураСвойств=Неопределено,ЭлементПеред=Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
//	ОпределитьЭлементФормы(Форма, РодительГруппы);
//	ОпределитьЭлементФормы(Форма, ЭлементПеред);
//	
//	НовыйЭлемент = СоздатьЭлементФормы(Форма, ИмяГруппы, Тип("ГруппаФормы"), РодительГруппы, ЭлементПеред);
//	НовыйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
//	НовыйЭлемент.ОтображатьВШапке = ОтображатьВШапке;
//	НовыйЭлемент.Заголовок = Заголовок;
//	
//	ПолучитьСостояниеГруппировкиКолонкиЭлемента(НовыйЭлемент, ГруппировкаГруппы);
//	ПолучитьСостояниеРастягиванияЭлементаПоГоризонтали(НовыйЭлемент, РастягиватьГоризонтально);
//	УстановитьСвойстваЭлементу(НовыйЭлемент, СтруктураСвойств);
//	Возврат НовыйЭлемент;
//	
//КонецФункции
//// } Мизгирев Я.М. 15.04.2024

//// Создание специфического элемента, выпадающий список.
////	Создается автоматически строковый реквизит с идентичным названием
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяСписка - Строка - Имя элемента на форме
////	РодительСписка	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	Заголовок - Строка - отображаемый заголовок кнопки
////	МассивЗначений - Массив - массив значений выбора из списка (содержит строковый тип)
////	РедактированиеТекста - Булево - Редактирование текста, если ЛОЖЬ, то можно выбирать только из списка
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и значение
////	СтруктураСобытий - Структура - Содержит значения событий, где ключ название события и в значение название процедуры тип "строка"
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздВыпадающийСписок(Форма,
//	ИмяСписка,
//	РодительСписка,
//	ЗаголовокЭлемента = "",
//	МассивЗначений,
//	РедактированиеТекста = ЛОЖЬ,
//	СтруктураСвойств = Неопределено,
//	СтруктураСобытий = Неопределено,
//	ЭлементПеред = Неопределено
//	) Экспорт
//	
//	СоздатьРеквизит(Форма,ИмяСписка,ОписаниеТипаСтрока(100)); 
//	НовыйРеквизит = Форма[ИмяСписка]; 
//	НовыйЭлемент = СздПоле(Форма,ИмяСписка,РодительСписка,ЗаголовокЭлемента,1,ИмяСписка,СтруктураСвойств,СтруктураСобытий,ЭлементПеред);
//	НовыйЭлемент.КнопкаВыпадающегоСписка = ИСТИНА; 
//	
//	Для Каждого текЭлемент Из МассивЗначений Цикл
//		НовыйЭлемент.СписокВыбора.Добавить(текЭлемент);	
//	КонецЦикла;
//	
//	Если ЗаголовокЭлемента <> "" Тогда НовыйЭлемент.Заголовок = ЗаголовокЭлемента; КонецЕсли;

//	НовыйЭлемент.РедактированиеТекста = РедактированиеТекста;
//	
//	Возврат НовыйЭлемент;	
//		
//КонецФункции

//// Создание специфического элемента, переключатель
////	Создается автоматически реквизит с типом число с идентичным названием
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяПереключателя - Строка - Имя элемента на форме
////	РодительЭлемента	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	Заголовок - Строка - отображаемый заголовок кнопки
////	МассивЗначений - Массив - Массив значений выбора из списка (содержит строковый тип),
////					Важно отметить, что номер в массиве соответствует номеру в списке выбора переключателя.
////	тВидПереключателя - Число - Принимает значения:
////					1 - Переключатель
////					2 - Тумблер
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и значение
////	СтруктураСобытий - Структура - Содержит значения событий, где ключ название события и в значение название процедуры тип "строка"
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздПереключатель(Форма,
//	ИмяПереключателя,
//	РодительЭлемента,
//	ЗаголовокЭлемента = "",
//	МассивЗначений,
//	тВидПереключателя,
//	СтруктураСвойств = Неопределено,
//	СтруктураСобытий = Неопределено,
//	ЭлементПеред = Неопределено
//	) Экспорт
//	
//	СоздатьРеквизит(Форма,ИмяПереключателя,ОписаниеТипаЧисло(10,0)); 
//	НовыйРеквизит = Форма[ИмяПереключателя]; 
//	НовыйЭлемент = СздПоле(Форма,ИмяПереключателя,РодительЭлемента,ЗаголовокЭлемента,4,ИмяПереключателя,СтруктураСвойств,СтруктураСобытий,ЭлементПеред);

//	Если ЗаголовокЭлемента <> "" Тогда НовыйЭлемент.Заголовок = ЗаголовокЭлемента; КонецЕсли;
//	
//	Если тВидПереключателя <> 0 Тогда
//		НаборВидов = "Переключатель
//		|Тумблер";		
//		ВидПоля = СокрЛП(СтрПолучитьСтроку(НаборВидов,тВидПереключателя));
//		НовыйЭлемент.ВидПереключателя = ВидПереключателя[ВидПоля];
//	КонецЕсли;	
//	
//	Счетчик = 0;
//	Для Каждого текЭлемент Из МассивЗначений Цикл
//		НовыйЭлемент.СписокВыбора.Добавить(Счетчик,текЭлемент);
//		Счетчик = Счетчик + 1;
//	КонецЦикла;
//	
//	Возврат НовыйЭлемент;	
//		
//КонецФункции

//// Создание поля гиперссылки
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяПоля - Строка - Имя элемента на форме
////	РодительПоля	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	Заголовок		- Строка - заголовок элемента
////	БезЗаголовка	- Булево - по умолчанию заголовок не выводится
////	ПутьКДанным		- Строка - Путь к данным значения
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и значение
////	СтруктураСобытий - Структура - Содержит значения событий, где ключ название события и в значение название процедуры тип "строка"
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздПолеГиперссылка(Форма,
//	ИмяПоля,
//	РодительПоля,
//	Заголовок = "",
//	БезЗаголовка = ИСТИНА,
//	ПутьКДанным = "",
//	СтруктураСвойств = Неопределено,
//	СтруктураСобытий = Неопределено,
//	ЭлементПеред = Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСобытий);
//	ОпределитьЭлементФормы(Форма,РодительПоля);
//	ОпределитьЭлементФормы(Форма,ЭлементПеред);
//	
//	НовыйЭлемент = СоздатьЭлементФормы(Форма,ИмяПоля,Тип("ПолеФормы"),РодительПоля,ЭлементПеред);	
//	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
//	НовыйЭлемент.Гиперссылка = ИСТИНА;
//	
//	Если БезЗаголовка Тогда НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет КонецЕсли;
//		
//	Если Заголовок <> "" Тогда НовыйЭлемент.Заголовок = Заголовок КонецЕсли;	
//	Если ПутьКДанным <> "" Тогда НовыйЭлемент.ПутьКДанным = ПутьКДанным КонецЕсли;
//	
//	УстановитьСвойстваЭлементу(НовыйЭлемент,СтруктураСвойств);
//	УстановитьСобытияЭлементу(НовыйЭлемент,СтруктураСобытий);
//	
//	Возврат НовыйЭлемент;
//	
//КонецФункции

//// Создание поля Надпись
////
//// Параметры:
////	Форма - ФормаКлиентскогоПриложения - Форма на которой создаются элементы
////  ИмяПоля - Строка - Имя элемента на форме
////	РодительПоля	- Строка - достаточно указать название элемента формы
////					- Элементы - можно в качестве родителя передать элемент формы
////	Заголовок		- Строка - заголовок элемента
////	БезЗаголовка	- Булево - по умолчанию заголовок не выводится
////	ПутьКДанным		- Строка - Путь к данным значения
////	СтруктураСвойств - Структура - Содержит значения свойств, где ключ название свойства и значение
////	СтруктураСобытий - Структура - Содержит значения событий, где ключ название события и в значение название процедуры тип "строка"
////	ЭлементПеред	- Строка - достаточно указать название элемента формы перед которым требуется вставить новый элемент
////					- Элементы - можно передать элемент формы
////
//Функция СздПолеНадписи(Форма,
//	ИмяПоля,
//	РодительПоля,
//	Заголовок = "",
//	БезЗаголовка = ИСТИНА,
//	ПутьКДанным = "",
//	СтруктураСвойств = Неопределено,
//	СтруктураСобытий = Неопределено,
//	ЭлементПеред = Неопределено) Экспорт
//	
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСвойств);
//	ЕслиСтруктураНеопределеноТоНовая(СтруктураСобытий);
//	ОпределитьЭлементФормы(Форма,РодительПоля);
//	ОпределитьЭлементФормы(Форма,ЭлементПеред);
//	
//	НовыйЭлемент = СоздатьЭлементФормы(Форма,ИмяПоля,Тип("ПолеФормы"),РодительПоля,ЭлементПеред);	
//	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
//	
//	Если БезЗаголовка Тогда НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет КонецЕсли;
//		
//	Если Заголовок <> "" Тогда НовыйЭлемент.Заголовок = Заголовок КонецЕсли;	
//	Если ПутьКДанным <> "" Тогда НовыйЭлемент.ПутьКДанным = ПутьКДанным КонецЕсли;
//	
//	УстановитьСвойстваЭлементу(НовыйЭлемент,СтруктураСвойств);
//	УстановитьСобытияЭлементу(НовыйЭлемент,СтруктураСобытий);
//	
//	Возврат НовыйЭлемент;
//	
//КонецФункции

#КонецОбласти
